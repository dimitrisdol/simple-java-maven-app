pipeline {
	agent any 
	tools {
        maven 'Maven'
        jdk 'jdk'
    }
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "172.19.0.4:8081"
        NEXUS_REPOSITORY = "maven"
        NEXUS_CREDENTIAL_ID = "Nexus-credentials-jenkins"

        USER_CREDENTIALS = credentials('Docker-credentials')
        NEXUS_DOCKER_REPOSITORY = "docker"
        TAG = "1.0.${BUILD_NUMBER}"
    }
	stages{
		stage("Compile"){
			steps{
				sh 'mvn compile'
			}
		}
		stage("Test"){
			steps{
				sh 'mvn test'
			}
		}
		stage("Build"){
			steps{
				sh 'mvn clean install'
			}
		}
		stage("Docker Build"){
			steps{
				script {
                    dockerImage = docker.build("${USER_CREDENTIALS_USR}/simple-java-maven-app:${TAG}")
                }
			}
		}
		stage("Deliver"){
			steps{
				 script {
				 	// Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                            // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                // Lets upload the pom.xml file for additional information for Transitive dependencies
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
			}
		}
		stage("Deploy Image") {
     		steps{
        		script {
            		docker.withRegistry( 'http://172.19.0.4:8082', NEXUS_CREDENTIAL_ID ) {
            		dockerImage.push()
    	        	}
      			}     
        	}
		}
		//stage("Deployment") {
		//	steps{

		//	}
		//}
	}
}
